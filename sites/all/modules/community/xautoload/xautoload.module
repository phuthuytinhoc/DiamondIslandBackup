<?php


/*
 * When the module has just been installed,
 * Drupal does not know yet this is a boot-level module.
 *
 * We can not rely on hook_boot() to fire, and instead register the autoloader
 * on inclusion of this *.module file.
 */
_xautoload_register();


/**
 * Implements hook_boot()
 *
 * This is only to let Drupal know we want this module to load in bootstrap.
 */
function xautoload_boot() {
  // Nothing happening here.
}


/**
 * Implements hook_init()
 *
 * Note:
 *   This is a first step to allow modules to register foreign namespaces.
 *   We will probably change this, to allow bootstrap modules to register their
 *   namespaces earlier in the request.
 *   We might also find a solution to cache the result of this hook between
 *   requests. This would require a different implementation of the InjectedAPI,
 *   which would no longer have a direct reference to the finder object.
 */
function xautoload_init() {
  $api = new xautoload_InjectedAPI_hookXautoload(xautoload_get_finder());
  foreach (module_implements('xautoload') as $module) {
    $api->setModule($module);
    $f = $module . '_xautoload';
    $f($api);
  }
}


/**
 * Implements hook_xautoload() on behalf of simpletest
 */
function simpletest_xautoload($api) {

  if (version_compare(PHP_VERSION, '5.3') < 0) {
    // Namespaces only exist since PHP 5.3.
    return;
  }

  // Register a handler that can find classes within disabled modules.
  // The handler will only load classes of the format "Drupal\(module)\Tests\.."
  $api->namespaceHandler('Drupal', new xautoload_NamespaceHandler_Simpletest);
}


/**
 * Implements hook_module_implements_alter()
 */
function xautoload_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'init') {
    // Move xautoload_init() to the start.
    $implementations = array('xautoload' => FALSE) + $implementations;
  }
}


/**
 * Implements hook_xautoload on behalf of libraries module
 */
function libraries_xautoload($api) {
  if (!function_exists('libraries_info')) {
    // Libraries is at a lower version, which does not have this function.
    return;
  }
  foreach (libraries_info() as $name => $info) {
    if (isset($info['xautoload'])) {
      $xinfo = $info['xautoload'];
      $api->setLibrary($name);
      if (is_callable($xinfo)) {
        call_user_func($xinfo, $api);
      }
    }
  }
}


function _xautoload_register() {
  static $_first_run = TRUE;
  if (!$_first_run) return;
  $_first_run = FALSE;
  spl_autoload_register('_xautoload_autoload_temp');
  _xautoload_autoload_temp('xautoload_InjectedAPI_findFile');
  $finder = _xautoload_finder();

  // We do not make the apc-cached finder available via a function,
  // because people can do nothing with it.
  if (
    extension_loaded('apc') &&
    function_exists('apc_store')
  ) {
    $apc_prefix = _xautoload_apc_prefix();
    if (!empty($apc_prefix)) {
      $finder = new xautoload_ClassFinder_ApcCache($finder, $apc_prefix);
    }
  }

  $loader = new xautoload_ClassLoader($finder);
  $loader->register(TRUE);
  spl_autoload_unregister('_xautoload_autoload_temp');
}


/**
 * Temporary loader, to avoid any module_load_include()
 * while building the real autoloader.
 */
function _xautoload_autoload_temp($name) {
  if (preg_match('#^xautoload_(.*)$#', $name, $m)) {
    // This is boot time, drupal_get_path() is not available yet.
    $file = dirname(__FILE__) . '/lib/' . strtr($m[1], '_', '/') . '.php';
    require_once $file;
    if (!class_exists($name, FALSE) && !interface_exists($name, FALSE)) {
      throw new Exception("Class $name not found in $file.");
    }
  }
}


/**
 * Get the class finder object.
 * This is the public version of _xautoload_finder().
 */
function xautoload_get_finder() {
  return _xautoload_finder();
}


/**
 * Static cache for the finder object.
 */
function _xautoload_finder() {
  static $_finder;
  if (!isset($_finder)) {
    $_finder = _xautoload_finder_create();
  }
  return $_finder;
}


/**
 * Implements hook_simpletest_alter().
 */
function xautoload_simpletest_alter(&$groups) {

  if (version_compare(PHP_VERSION, '5.3') < 0) {
    // Namespaces only exist since PHP 5.3.
    return;
  }

  // Select all PSR-0 classes in the Tests namespace of all modules.
  // This does include disabled modules.
  $system_list = db_query("SELECT name, filename FROM {system}")->fetchAllKeyed();

  foreach ($system_list as $name => $filename) {
    // Build directory in which the test files would reside.
    $tests_dir = DRUPAL_ROOT . '/' . dirname($filename) . '/lib/Drupal/' . $name . '/Tests';
    // Scan it for test files if it exists.
    if (is_dir($tests_dir)) {
      $files = file_scan_directory($tests_dir, '/.*\.php/');
      if (!empty($files)) {
        $basedir = DRUPAL_ROOT . '/' . dirname($filename) . '/lib/';
        foreach ($files as $file) {
          // Convert the file name into the namespaced class name.
          $replacements = array(
            '/' => '\\',
            $basedir => '',
            '.php' => '',
          );
          $classes[] = strtr($file->uri, $replacements);
        }
      }
    }
  }

  // Check that each class has a getInfo() method and store the information
  // in an array keyed with the group specified in the test information.
  foreach ($classes as $class) {
    // Test classes need to implement getInfo() to be valid.
    if (class_exists($class) && method_exists($class, 'getInfo')) {
      $info = call_user_func(array($class, 'getInfo'));

      // If this test class requires a non-existing module, skip it.
      if (!empty($info['dependencies'])) {
        foreach ($info['dependencies'] as $module) {
          if (!drupal_get_filename('module', $module)) {
            continue 2;
          }
        }
      }

      $groups[$info['group']][$class] = $info;
    }
  }

  // Sort the groups and tests within the groups by name.
  uksort($groups, 'strnatcasecmp');
  foreach ($groups as $group => &$tests) {
    uksort($tests, 'strnatcasecmp');
  }
}


/**
 * Two autoload styles are registered by default:
 * 
 */
function _xautoload_finder_create() {

  $system = new xautoload_DrupalExtensionSystem();
  $handler = new xautoload_NamespaceHandler_DrupalExtensionLib($system);
  $handler_psr0 = new xautoload_NamespaceHandler_DrupalExtensionLibPSR0($system);

  if (version_compare(PHP_VERSION, '5.3') >= 0) {
    $finder = new xautoload_ClassFinder_NamespaceOrPrefix();
    // D8-style autoloading.
    $finder->registerNamespaceHandler('Drupal', $handler_psr0);
  }
  else {
    // If we are not at PHP 5.3 +, we don't need namespaces support.
    $finder = new xautoload_ClassFinder_Prefix();
  }

  // xautoload-style autoloading:
  $finder->registerPrefixHandler('', $handler);

  return $finder;
}


function _xautoload_apc_prefix() {
  global $databases;
  if (!empty($databases)) {
    return 'drupal_xautoload_' . hash('sha256', serialize($databases));
  }
}


/**
 * Implements hook_registry_files_alter()
 *
 * Support wildcard syntax in the files[] setting in your module's info file.
 */
function xautoload_registry_files_alter(&$files, $modules) {

  $orig = $files;
  // The class file is loaded using the regular uncached xautoload autoload.
  $rec_scan = new xautoload_RegistryWildcard_RecursiveScan($files);

  foreach ($files as $path => $file) {
    $rec_scan->check($path, $file);
  }
}
